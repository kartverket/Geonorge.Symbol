@model Geonorge.Symbol.Models.Symbol
@section breadcrumb {
    <li><a href="@VirtualPathUtility.ToAbsolute("~/files/index")">Symbol</a></li>
    <li>Registrer symbol</li>
}
@{
    ViewBag.Title = "Registrer symbol";
}
<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h1 class="shortcut">
                Registrer symbol
            </h1>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "symbolform" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @if (ViewBag.IsAdmin)
        {
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-md-12">
                            <span class="required">Eierinformasjon til symbol – hvem leverer symbol</span>
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Owner, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <select class="ownerOrganizationSelect form-control" id="Owner" name="Owner"> </select>
                            @Html.ValidationMessageFor(model => model.Owner, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-md-12">
                        <span class="required">Informasjon om symbol-filen</span>
                    </div>
                </div>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", cols = "", rows = "2", style = "min-height: 0;" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SymbolId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SymbolId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SymbolId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Theme, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="custom-select">
                            @Html.DropDownList("Theme", ViewBag.Themes as SelectList, String.Empty, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Theme, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SymbolPackages, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.DropDownList("packages", (MultiSelectList)ViewBag.SymbolPackages, string.Empty, new { @class = "form-control packagesSelect" })
                        @Html.ValidationMessageFor(model => model.SymbolPackages, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2">
                        @if (ViewBag.IsAdmin)
                        {
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#packageModal">
                                Legg til pakke
                            </button>
                        }
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Source, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Source, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SourceUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SourceUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SourceUrl, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Miniatyrbilde", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" id="uploadFile" name="uploadFile" />
                    </div>
                </div>
            </div>
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 hidden-print margin-top-10">
                <a class="hidden-print show-loading-animation pull-left" data-loading-message="Henter innhold" href="@VirtualPathUtility.ToAbsolute("~/files/index")">Tilbake</a>
                <input type="submit" value="Lagre" class="btn btn-default pull-right" />
            </div>
        </div>
    </div>
}
<!-- Modal -->
@using (Html.BeginForm("addpackage", "api"))
{
    @Html.AntiForgeryToken()
    <div class="modal fade" id="packageModal" role="dialog" aria-labelledby="packageModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="packageModalLabel">Legg til pakke</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Lukk">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.Label("Navn", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input type="text" id="NamePackage" name="Name" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Offisiell", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="checkbox">
                                    <input type="checkbox" name="OfficialStatus" id="OfficialStatusPackage" value="True" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Organisasjon", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @if (ViewBag.IsAdmin)
                                {
                                    <select class="ownerOrganizationPackageSelect" id="OwnerPackage" name="Owner"> </select>
                                }
                                else
                                {
                                    <span>@ViewBag.Owner</span>
                                    <input type="hidden" id="OwnerPackage" name="Owner" value="@ViewBag.Owner" />
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Tema", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("ThemePackage", ViewBag.Themes as SelectList, String.Empty, new { @class = "form-control" })
                            </div>
                        </div>
                        <span id="errormsg" class="alert-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Lukk</button>
                    <button type="button" id="AddPackage" class="btn btn-primary">Legg til</button>
                </div>
            </div>
        </div>
    </div>
}
@section scripts{
    <script>
    $(document).ready(function () {

        $("#packageModal").on("hide.bs.modal", function () {
            $('#errormsg').html("");
        });

        $("#AddPackage").click(function () {
            var packageData = {
                Name: $('#NamePackage').val(),
                OfficialStatus: $('#OfficialStatusPackage').val(),
                Owner: $('#OwnerPackage').val(),
                Theme: $('#ThemePackage').val()
            };
            $.ajax({
                type: "POST",
                async: false,
                url: "@(!HttpContext.Current.Request.Url.Host.Contains("localhost") ? "/symbol" : "")/api/addpackage",
                data: JSON.stringify(packageData),
                contentType: "application/json",
                dataType: "json",
                success: function (pkg) {
                    console.log(pkg);
                    console.log(pkg.SystemId);
                    $("#packages").append(new Option(pkg.Name, pkg.SystemId, true, true))
                    $('#packageModal').modal('toggle');
                },
                error: function (xhr, status, error) {
                    var errorResponse = JSON.parse(xhr.responseText);
                    $('#errormsg').html("Det oppstod en feil: " + errorResponse.Message)
                }
            });
        });
    });
    </script>
    <script src="@VirtualPathUtility.ToAbsolute("~/Scripts/select2.min.js")"></script>
    <script type="text/javascript" src="~/Scripts/custom.js"></script>
    <script>
        var organizationsPackage = [];

        $('.ownerOrganizationPackageSelect').select2({
            placeholder: "Søk etter organisasjon",
            language: "nb",
            ajax: {
                url: registryUrl + "api/search",
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        text: params.term,// search term
                        limit: 10,
                        'facets[0]name': "type",
                        'facets[0]value': "organisasjoner"
                    };
                },
                processResults: function (data, params) {
                    organizationsPackage = [];
                    $.each(data.Results, function (i, item) {
                        option = {}
                        option["id"] = item.Name;
                        option["text"] = item.Name;

                        organizationsPackage.push(option);
                    })

                    return {
                        results: organizationsPackage
                    };
                },
                cache: true
            },
            minimumInputLength: 3
        });
    </script>
}